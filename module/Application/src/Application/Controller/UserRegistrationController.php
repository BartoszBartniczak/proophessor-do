<?php
/*
 * This file is part of prooph/proophessor.
 * (c) 2014-2015 prooph software GmbH <contact@prooph.de>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 * 
 * Date: 5/3/15 - 10:10 PM
 */
namespace Application\Controller;

use Application\Model\Command\RegisterUser;
use Prooph\ServiceBus\CommandBus;
use Rhumsaa\Uuid\Uuid;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;

/**
 * Class UserRegistrationController
 *
 * @package Application\Controller
 * @author Alexander Miertsch <kontakt@codeliner.ws>
 */
final class UserRegistrationController extends AbstractActionController
{
    /**
     * @var CommandBus
     */
    private $commandBus;

    public function __construct(CommandBus $commandBus)
    {
        $this->commandBus = $commandBus;
    }

    public function registerAction()
    {
        if ($this->getRequest()->isPost()) {

            $viewModel = $this->getRegisterViewModel();

            $invalid = false;

            $name = $this->params()->fromPost('username');

            if (! is_string($name) || empty($name)) {
                $invalid = true;
                $viewModel->setVariable('invalidName', true);
                $viewModel->setVariable('invalidNameMsg', 'Username should not be empty!');
            }

            $email = filter_var($this->params()->fromPost('email'), FILTER_VALIDATE_EMAIL);

            if (! $email) {
                $invalid = true;
                $viewModel->setVariable('invalidEmail', true);
                $viewModel->setVariable('invalidEmailMsg', 'Email should not be empty!');
            }

            if ($invalid) {
                return $viewModel->setVariable('name', $name)->setVariable('email', $email);
            }

            //The user id is generated by the controller, so that we can provide the client with
            //the identifier to request the user data after registration
            $userId = Uuid::uuid4()->toString();

            $command = RegisterUser::withData(
                $userId,
                $name,
                $email
            );

            $this->commandBus->dispatch($command);

            //When dispatching a command you get no response from the command bus, except an exception is thrown!
            //The client has to request the user data from the read model. However, a Post-Redirect-Get mechanism is
            //recommended anyway.
            return $this->redirect()->toRoute('user_show', ['user_id' => $userId]);
        } else {
            return [];
        }
    }

    private function getRegisterViewModel()
    {
        $viewModel = new ViewModel([
            'invalidName' => false,
            'invalidNameMsg' => null,
            'invalidEmail' => false,
            'invalidEmailMsg' => null
        ]);

        $viewModel->setTemplate('application/user-registration/register');

        return $viewModel;
    }
} 