<?php
/**
 * This file is part of prooph/proophessor-do.
 * (c) 2014-2016 prooph software GmbH <contact@prooph.de>
 * (c) 2015-2016 Sascha-Oliver Prolic <saschaprolic@googlemail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Prooph\ProophessorDo;

/**
 * Local configuration overrides - make your adjustments here
 */
return [
    // Doctrine DBAL connection settings - for read model
    'doctrine' => [
        'connection' => [
// choose one !!!
// first for mysql
//            'default' => [
//                'driverClass' => 'Doctrine\DBAL\Driver\PDOMySql\Driver',
//                'host' => 'localhost',
//                'port' => '3306',
//                'user' => 'root',
//                'password' => 'root',
//                'dbname' => 'todo',
//                'charset' => 'utf8',
//                'driverOptions' => [
//                    1002 => "SET NAMES 'UTF8'"
//                ],
// second for postgres
//            'default' => [
//                'driverClass' => 'Doctrine\DBAL\Driver\PDOPgSql\Driver',
//                'host' => 'localhost',
//                'port' => '5432',
//                'user' => 'postgres',
//                'password' => '5432',
//                'dbname' => 'todo',
            ],
        ],
    ],
    // mail transport settings
    'proophessor-do' => [
        'mail' => [
            'transport' => 'in_memory',  // smtp or in_memory (default)
// uncomment if you want to use smtp. Preset for gmail
//            'smtp' => [
//                'name' => 'gmail.com',
//                'host' => 'smtp.gmail.com',
//                'port' => 587,
//                'connection_class' => 'plain',
//                'connection_config' => [
//                    'username' => 'YOUR_USERNAME_HERE',
//                    'password' => 'YOUR_PASSWORD_HERE',
//                    'ssl' => 'tls',
//                ],
//            ],
        ],
// choose one (for event-store and snapshot-store) !!!
// for mysql
//        'pdo_connection' => [
//            'driver' => 'pdo_myql',
//            'host' => '127.0.0.1',
//            'port' => '3306',
//            'user' => 'root',
//            'password' => 'root',
//            'dbname' => 'todo',
//            'charset' => 'utf8',
//        ],
// for postgres
//        'pdo_connection' => [
//            'driver' => 'pdo_pgsql',
//            'user' => 'postgres',
//            'password' => '',
//            'host' => '127.0.0.1',
//            'dbname' => 'todo',
//            'port' => 5432,
//        ],
    ],
    // dependencies settings
    'dependencies' => [
        'factories' => [
// choose one event store implementation !!!
//            \Prooph\EventStore\EventStore::class => ['Prooph\EventStore\PDO\Container\MySQLEventStoreFactory', 'default'],
//            \Prooph\EventStore\EventStore::class => ['Prooph\EventStore\PDO\Container\PostgresEventStoreFactory', 'default'],
// choose one snapshot store implementation (optional) !!!
//            \Prooph\EventSourcing\Snapshot\SnapshotStore::class => ['Prooph\MongoDB\SnapshotStore\Container\MongoDBSnapshotStoreFactory', 'default'],
//            \Prooph\EventSourcing\Snapshot\SnapshotStore::class => ['Prooph\PDO\SnapshotStore\Container\PDOSnapshotStoreFactory', 'default'],
// mongo client settings - for snapshots (optional)
//            'mongo_client' => function () {
// Change set up of the mongo client, if you need to configure connection settings
//                return new \MongoDB\Client();
//            },
        ],
    ],
    // prooph settings
    'prooph' => [
// configure snapshot store (optional) - choose one accordingly, if any
//        'pdo_snapshot_store' => [
//            'default' => [
//                'connection_service' => 'doctrine.connection.default',
//            ],
//        ],
//        'mongodb_snapshot_store' => [
//            'default' => [
//                'mongo_client_service' => 'mongo_client',
//            ],
//        ],
// if snapshot store is used, enable the following lines
//        'event_sourcing' => [
//            'aggregate_repository' => [
//                'todo_list' => [
//                    'snapshot_store' => \Prooph\EventSourcing\Snapshot\SnapshotStore::class
//                ],
//                'user_collection' => [
//                    'snapshot_store' => \Prooph\EventSourcing\Snapshot\SnapshotStore::class
//                ],
//            ],
//        ],
        'event_store' => [
            'default' => [
// choose one accordingly !!!
//                'persistence_strategy' => 'Prooph\EventStore\PDO\PersistenceStrategy\MySQLSingleStreamStrategy',
//                'persistence_strategy' => 'Prooph\EventStore\PDO\PersistenceStrategy\PostgresSingleStreamStrategy',
            ]
        ]
    ],
];
